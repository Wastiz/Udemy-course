'use strict';

//Все программисты понимают, что ошибки неизбежны. Они могут возникать даже в крупных проектах, где все должно быть отпалировано
//Поэтому в синтаксисе языка есть конструкция try catch

try {
    console.log('something'); //тут все понятно. Сначала код берет все что в try, выполняет его
    console.log(a); //Весь код из try будет выполняться, пока не наткнется на ошибку.
    console.log('something');
} catch (error) { //Если в try все верно проходит, то catch просто игнорируется
    console.log(error); //аргумент в catch является ошибкой. То есть описание этой ошибки. Тем самым мы можем в консоли посмотреть ошибку.
} finally {
    console.log('I will work always'); //Как и в промисах, есть блок кода finally, этот код будет срабатывать в любом случае
}
//Самое главное то, что код, который написан после этой конструкции будет работать в любом случае
console.log('continue');

//У аргумента есть еще несколько свойств. В писываются в консоль лог
// error.name Название ошибки (reference error) например
// error.message Описание ошибки -  a is not defined
// error.stack На какой линии и в каком файле 